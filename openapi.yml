openapi: 3.0.0
info:
  title: Example API
  version: '1.0'
  contact:
    name: Common Fate
    url: 'https://commonfate.io'
  description: Example API
servers:
  - url: 'http://localhost:9001'
paths:
  /api/v1/health:
    get:
      summary: Healthcheck
      responses:
        '200':
          $ref: '#/components/responses/HealthResponse'
        '500':
          $ref: '#/components/responses/HealthResponse'
      operationId: get-health
      description: Returns the health of the service. If any healthchecks fail the response code will be 500 (Internal Server Error).
      tags:
        - Public
  '/api/v1/team/{team}/providers/{name}/{version}':
    parameters:
      - schema:
          type: string
        name: team
        in: path
        required: true
      - schema:
          type: string
        name: version
        in: path
        required: true
      - schema:
          type: string
        name: name
        in: path
        required: true
    get:
      summary: Get Provider
      operationId: get-provider
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
      tags:
        - Public
  '/api/v1/team/{team}/providers/{name}/{version}/setup':
    parameters:
      - schema:
          type: string
        name: team
        in: path
        required: true
      - schema:
          type: string
        name: version
        in: path
        required: true
      - schema:
          type: string
        name: name
        in: path
        required: true
    get:
      summary: Get Provider Setup Docs
      operationId: get-provider-setup-docs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Public
  '/api/v1/team/{team}/providers/{name}/{version}/usage':
    parameters:
      - schema:
          type: string
        name: team
        in: path
        required: true
      - schema:
          type: string
        name: version
        in: path
        required: true
      - schema:
          type: string
        name: name
        in: path
        required: true
    get:
      summary: Get Provider Usage Doc
      operationId: get-provider-usage-doc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Public
      description: ''
  /api/v1/providers:
    get:
      summary: List Providers
      tags:
        - Public
      responses:
        '200':
          $ref: '#/components/responses/ListProvidersResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      operationId: list-all-providers
components:
  schemas:
    Provider:
      title: Provider
      x-stoplight:
        id: u2lvhh2c9p2n2
      type: object
      description: A registered provider version
      properties:
        team:
          type: string
        name:
          type: string
        version:
          type: string
        lambdaAssetS3Arn:
          type: string
        schema:
          $ref: '#/components/schemas/ProviderSchema'
      required:
        - team
        - name
        - version
        - lambdaAssetS3Arn
        - schema
    Setup:
      title: Setup
      x-stoplight:
        id: gyckslzdk6piz
      type: object
      properties:
        steps:
          type: array
          items:
            type: string
        schema:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConfigurationArgument'
      required:
        - steps
        - schema
    Usage:
      title: Usage
      x-stoplight:
        id: j2716x39xk333
      type: object
      properties:
        usage:
          type: string
      required:
        - usage
    S3Asset:
      title: S3 Asset
      x-stoplight:
        id: faa66d2361fb2
      type: object
      properties:
        path:
          type: string
        bucket:
          type: string
        region:
          type: string
      required:
        - path
        - bucket
        - region
    ConfigurationArgument:
      title: ConfigurationArgument
      x-stoplight:
        id: 85cc1a308799b
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - STRING
            - SECRETSTRING
        secret:
          type: boolean
        optional:
          type: boolean
        usage:
          type: string
        name:
          type: string
      required:
        - id
        - type
        - secret
        - optional
        - usage
        - name
    TargetArgument:
      title: TargetArgument
      x-stoplight:
        id: 1b080aa3276c2
      type: object
      description: 'Define the metadata, data type and UI elements for the argument'
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        ruleFormElement:
          type: string
          enum:
            - INPUT
            - MULTISELECT
            - SELECT
        requestFormElement:
          type: string
          enum:
            - SELECT
          description: 'Optional form element for the request form, if not provided, defaults to multiselect'
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TargetArgumentGroup'
      required:
        - id
        - title
        - ruleFormElement
        - requestFormElement
        - groups
    TargetArgumentGroup:
      title: TargetArgumentGroup
      x-stoplight:
        id: b65de9db1722a
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
      required:
        - id
        - title
      description: An argument group
    ProviderSchema:
      title: ProviderSchema
      x-stoplight:
        id: d3gvj3cbsoe70
      type: object
      properties:
        schemaVersion:
          type: string
        providerVersion:
          type: string
        configuration:
          $ref: '#/components/schemas/ConfigurationSchema'
        audit:
          $ref: '#/components/schemas/AuditSchema'
        target:
          $ref: '#/components/schemas/TargetSchema'
      required:
        - schemaVersion
        - providerVersion
        - configuration
        - audit
        - target
    TargetSchema:
      title: TargetSchema
      x-stoplight:
        id: tk7obmea4shbx
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TargetArgument'
    ConfigurationSchema:
      title: ConfigurationSchema
      x-stoplight:
        id: 0ssv4v6krg6tz
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ConfigurationArgument'
    AuditSchema:
      title: AuditSchema
      x-stoplight:
        id: bacx4ke9fh1bo
      type: object
      properties:
        resourceLoaders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceLoader'
      required:
        - resourceLoaders
    ResourceLoader:
      title: ResourceLoader
      x-stoplight:
        id: j3ehgrwrocbeh
      type: object
      properties:
        title:
          type: string
      required:
        - title
  requestBodies: {}
  responses:
    HealthResponse:
      description: Healthcheck response body.
      content:
        application/json:
          schema:
            type: object
            properties:
              healthy:
                type: boolean
            required:
              - healthy
          examples: {}
    ErrorResponse:
      description: An error returned from the API.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
          examples: {}
    ListProvidersResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              providers:
                type: array
                items:
                  $ref: '#/components/schemas/Provider'
              next:
                type: string
                nullable: true
            required:
              - providers
              - next
    RegisterProvidersResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              zipUploadUrl:
                type: string
            required:
              - zipUploadUrl
tags:
  - name: Public
  - name: Team
