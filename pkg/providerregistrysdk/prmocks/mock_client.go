// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/provider-registry-sdk-go/pkg/providerregistrysdk (interfaces: ClientWithResponsesInterface)

// Package prmocks is a generated GoMock package.
package prmocks

import (
	context "context"
	io "io"
	reflect "reflect"

	providerregistrysdk "github.com/common-fate/provider-registry-sdk-go/pkg/providerregistrysdk"
	gomock "github.com/golang/mock/gomock"
)

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetProviderReadmeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProviderReadmeWithResponse(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.GetProviderReadmeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProviderReadmeWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.GetProviderReadmeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderReadmeWithResponse indicates an expected call of GetProviderReadmeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProviderReadmeWithResponse(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderReadmeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProviderReadmeWithResponse), varargs...)
}

// GetProviderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProviderWithResponse(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.GetProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProviderWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.GetProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderWithResponse indicates an expected call of GetProviderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProviderWithResponse(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProviderWithResponse), varargs...)
}

// HealthcheckWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HealthcheckWithResponse(arg0 context.Context, arg1 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.HealthcheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthcheckWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.HealthcheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthcheckWithResponse indicates an expected call of HealthcheckWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HealthcheckWithResponse(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthcheckWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HealthcheckWithResponse), varargs...)
}

// ListAllProvidersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListAllProvidersWithResponse(arg0 context.Context, arg1 *providerregistrysdk.ListAllProvidersParams, arg2 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.ListAllProvidersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllProvidersWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.ListAllProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProvidersWithResponse indicates an expected call of ListAllProvidersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListAllProvidersWithResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProvidersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListAllProvidersWithResponse), varargs...)
}

// ListProviderVersionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListProviderVersionsWithResponse(arg0 context.Context, arg1, arg2 string, arg3 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.ListProviderVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProviderVersionsWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.ListProviderVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderVersionsWithResponse indicates an expected call of ListProviderVersionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListProviderVersionsWithResponse(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderVersionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListProviderVersionsWithResponse), varargs...)
}

// UserCompletePublishProviderWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UserCompletePublishProviderWithBodyWithResponse(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.UserCompletePublishProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserCompletePublishProviderWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.UserCompletePublishProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCompletePublishProviderWithBodyWithResponse indicates an expected call of UserCompletePublishProviderWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UserCompletePublishProviderWithBodyWithResponse(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCompletePublishProviderWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UserCompletePublishProviderWithBodyWithResponse), varargs...)
}

// UserCompletePublishProviderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UserCompletePublishProviderWithResponse(arg0 context.Context, arg1 providerregistrysdk.Provider, arg2 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.UserCompletePublishProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserCompletePublishProviderWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.UserCompletePublishProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCompletePublishProviderWithResponse indicates an expected call of UserCompletePublishProviderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UserCompletePublishProviderWithResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCompletePublishProviderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UserCompletePublishProviderWithResponse), varargs...)
}

// UserCreatePublisherWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UserCreatePublisherWithBodyWithResponse(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.UserCreatePublisherResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserCreatePublisherWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.UserCreatePublisherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreatePublisherWithBodyWithResponse indicates an expected call of UserCreatePublisherWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UserCreatePublisherWithBodyWithResponse(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreatePublisherWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UserCreatePublisherWithBodyWithResponse), varargs...)
}

// UserCreatePublisherWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UserCreatePublisherWithResponse(arg0 context.Context, arg1 providerregistrysdk.UserCreatePublisherJSONRequestBody, arg2 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.UserCreatePublisherResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserCreatePublisherWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.UserCreatePublisherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreatePublisherWithResponse indicates an expected call of UserCreatePublisherWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UserCreatePublisherWithResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreatePublisherWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UserCreatePublisherWithResponse), varargs...)
}

// UserGetMeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UserGetMeWithResponse(arg0 context.Context, arg1 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.UserGetMeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserGetMeWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.UserGetMeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetMeWithResponse indicates an expected call of UserGetMeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UserGetMeWithResponse(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetMeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UserGetMeWithResponse), varargs...)
}

// UserPublishProviderWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UserPublishProviderWithBodyWithResponse(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.UserPublishProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserPublishProviderWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.UserPublishProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPublishProviderWithBodyWithResponse indicates an expected call of UserPublishProviderWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UserPublishProviderWithBodyWithResponse(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPublishProviderWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UserPublishProviderWithBodyWithResponse), varargs...)
}

// UserPublishProviderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UserPublishProviderWithResponse(arg0 context.Context, arg1 providerregistrysdk.UserPublishProviderJSONRequestBody, arg2 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.UserPublishProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserPublishProviderWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.UserPublishProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPublishProviderWithResponse indicates an expected call of UserPublishProviderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UserPublishProviderWithResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPublishProviderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UserPublishProviderWithResponse), varargs...)
}
