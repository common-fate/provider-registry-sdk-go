// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/provider-registry-sdk-go/pkg/providerregistrysdk (interfaces: ClientWithResponsesInterface)

// Package prmocks is a generated GoMock package.
package prmocks

import (
	context "context"
	io "io"
	reflect "reflect"

	providerregistrysdk "github.com/common-fate/provider-registry-sdk-go/pkg/providerregistrysdk"
	gomock "github.com/golang/mock/gomock"
)

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetProviderSetupDocsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProviderSetupDocsWithResponse(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.GetProviderSetupDocsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProviderSetupDocsWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.GetProviderSetupDocsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderSetupDocsWithResponse indicates an expected call of GetProviderSetupDocsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProviderSetupDocsWithResponse(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderSetupDocsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProviderSetupDocsWithResponse), varargs...)
}

// GetProviderUsageDocWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProviderUsageDocWithResponse(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.GetProviderUsageDocResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProviderUsageDocWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.GetProviderUsageDocResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderUsageDocWithResponse indicates an expected call of GetProviderUsageDocWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProviderUsageDocWithResponse(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderUsageDocWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProviderUsageDocWithResponse), varargs...)
}

// GetProviderWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProviderWithResponse(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.GetProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProviderWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.GetProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderWithResponse indicates an expected call of GetProviderWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProviderWithResponse(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProviderWithResponse), varargs...)
}

// GetV1alpha1SignupOauth2CallbackWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV1alpha1SignupOauth2CallbackWithResponse(arg0 context.Context, arg1 *providerregistrysdk.GetV1alpha1SignupOauth2CallbackParams, arg2 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.GetV1alpha1SignupOauth2CallbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV1alpha1SignupOauth2CallbackWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.GetV1alpha1SignupOauth2CallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alpha1SignupOauth2CallbackWithResponse indicates an expected call of GetV1alpha1SignupOauth2CallbackWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV1alpha1SignupOauth2CallbackWithResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alpha1SignupOauth2CallbackWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV1alpha1SignupOauth2CallbackWithResponse), varargs...)
}

// GetV1alpha1SignupOauth2GithubWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetV1alpha1SignupOauth2GithubWithResponse(arg0 context.Context, arg1 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.GetV1alpha1SignupOauth2GithubResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV1alpha1SignupOauth2GithubWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.GetV1alpha1SignupOauth2GithubResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1alpha1SignupOauth2GithubWithResponse indicates an expected call of GetV1alpha1SignupOauth2GithubWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetV1alpha1SignupOauth2GithubWithResponse(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1alpha1SignupOauth2GithubWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetV1alpha1SignupOauth2GithubWithResponse), varargs...)
}

// HealthcheckWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HealthcheckWithResponse(arg0 context.Context, arg1 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.HealthcheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthcheckWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.HealthcheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthcheckWithResponse indicates an expected call of HealthcheckWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HealthcheckWithResponse(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthcheckWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HealthcheckWithResponse), varargs...)
}

// ListAllProvidersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListAllProvidersWithResponse(arg0 context.Context, arg1 *providerregistrysdk.ListAllProvidersParams, arg2 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.ListAllProvidersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllProvidersWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.ListAllProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProvidersWithResponse indicates an expected call of ListAllProvidersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListAllProvidersWithResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProvidersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListAllProvidersWithResponse), varargs...)
}

// PostV1alpha1RegisterWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV1alpha1RegisterWithBodyWithResponse(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.PostV1alpha1RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV1alpha1RegisterWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.PostV1alpha1RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1alpha1RegisterWithBodyWithResponse indicates an expected call of PostV1alpha1RegisterWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV1alpha1RegisterWithBodyWithResponse(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1alpha1RegisterWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV1alpha1RegisterWithBodyWithResponse), varargs...)
}

// PostV1alpha1RegisterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV1alpha1RegisterWithResponse(arg0 context.Context, arg1 providerregistrysdk.PostV1alpha1RegisterJSONRequestBody, arg2 ...providerregistrysdk.RequestEditorFn) (*providerregistrysdk.PostV1alpha1RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV1alpha1RegisterWithResponse", varargs...)
	ret0, _ := ret[0].(*providerregistrysdk.PostV1alpha1RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1alpha1RegisterWithResponse indicates an expected call of PostV1alpha1RegisterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV1alpha1RegisterWithResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1alpha1RegisterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV1alpha1RegisterWithResponse), varargs...)
}
