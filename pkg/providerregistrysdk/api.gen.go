// Package providerregistrysdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package providerregistrysdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ArgumentRequestFormElement.
const (
	ArgumentRequestFormElementSELECT ArgumentRequestFormElement = "SELECT"
)

// Defines values for ArgumentRuleFormElement.
const (
	ArgumentRuleFormElementINPUT       ArgumentRuleFormElement = "INPUT"
	ArgumentRuleFormElementMULTISELECT ArgumentRuleFormElement = "MULTISELECT"
	ArgumentRuleFormElementSELECT      ArgumentRuleFormElement = "SELECT"
)

// Defines values for ConfigSchemaType.
const (
	SECRETSTRING ConfigSchemaType = "SECRETSTRING"
	STRING       ConfigSchemaType = "STRING"
)

// Argument Define the metadata, data type and UI elements for the argument
type Argument struct {
	Description *string                   `json:"description,omitempty"`
	Groups      *map[string]ArgumentGroup `json:"groups,omitempty"`
	Id          string                    `json:"id"`

	// RequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
	RequestFormElement *ArgumentRequestFormElement `json:"requestFormElement,omitempty"`
	RuleFormElement    ArgumentRuleFormElement     `json:"ruleFormElement"`
	Title              string                      `json:"title"`
}

// ArgumentRequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
type ArgumentRequestFormElement string

// ArgumentRuleFormElement defines model for Argument.RuleFormElement.
type ArgumentRuleFormElement string

// ArgumentGroup An argument group
type ArgumentGroup struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// ArgumentSchema Provider argument schema defines the arguments, titles, descriptions and UI elements for provider arguments.
type ArgumentSchema map[string]Argument

// ConfigSchema defines model for ConfigSchema.
type ConfigSchema struct {
	Id       string           `json:"id"`
	Name     string           `json:"name"`
	Optional bool             `json:"optional"`
	Secret   bool             `json:"secret"`
	Type     ConfigSchemaType `json:"type"`
	Usage    string           `json:"usage"`
}

// ConfigSchemaType defines model for ConfigSchema.Type.
type ConfigSchemaType string

// Provider A registered provider version
type Provider struct {
	// ArgumentSchema Provider argument schema defines the arguments, titles, descriptions and UI elements for provider arguments.
	ArgumentSchema   ArgumentSchema `json:"argumentSchema"`
	LambdaAssetS3Arn string         `json:"lambdaAssetS3Arn"`
	Name             string         `json:"name"`
	Setup            Setup          `json:"setup"`
	Team             string         `json:"team"`
	Usage            string         `json:"usage"`
	Version          string         `json:"version"`
}

// S3Asset defines model for S3Asset.
type S3Asset struct {
	Bucket string `json:"bucket"`
	Path   string `json:"path"`
	Region string `json:"region"`
}

// Setup defines model for Setup.
type Setup struct {
	Schema map[string]ConfigSchema `json:"schema"`
	Steps  []string                `json:"steps"`
}

// Usage defines model for Usage.
type Usage struct {
	Usage string `json:"usage"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Healthy bool `json:"healthy"`
}

// ListProvidersResponse defines model for ListProvidersResponse.
type ListProvidersResponse struct {
	Next      *string    `json:"next"`
	Providers []Provider `json:"providers"`
}

// RegisterProvidersResponse defines model for RegisterProvidersResponse.
type RegisterProvidersResponse struct {
	ZipUploadUrl string `json:"zipUploadUrl"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllProviders request
	ListAllProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvider request
	GetProvider(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteRegistration request
	CompleteRegistration(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterProvider request
	RegisterProvider(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvider(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderRequest(c.Server, team, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteRegistration(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteRegistrationRequest(c.Server, team, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterProvider(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterProviderRequest(c.Server, team, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAllProvidersRequest generates requests for ListAllProviders
func NewListAllProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderRequest generates requests for GetProvider
func NewGetProviderRequest(server string, team string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/team/%s/providers/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteRegistrationRequest generates requests for CompleteRegistration
func NewCompleteRegistrationRequest(server string, team string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/team/%s/providers/%s/%s/complete-registration", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterProviderRequest generates requests for RegisterProvider
func NewRegisterProviderRequest(server string, team string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/team/%s/providers/%s/%s/register", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHealth request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// ListAllProviders request
	ListAllProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error)

	// GetProvider request
	GetProviderWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error)

	// CompleteRegistration request
	CompleteRegistrationWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*CompleteRegistrationResponse, error)

	// RegisterProvider request
	RegisterProviderWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*RegisterProviderResponse, error)
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Healthy bool `json:"healthy"`
	}
	JSON500 *struct {
		Healthy bool `json:"healthy"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next      *string    `json:"next"`
		Providers []Provider `json:"providers"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAllProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Provider
}

// Status returns HTTPResponse.Status
func (r GetProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ZipUploadUrl string `json:"zipUploadUrl"`
	}
	JSON400 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RegisterProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ListAllProvidersWithResponse request returning *ListAllProvidersResponse
func (c *ClientWithResponses) ListAllProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error) {
	rsp, err := c.ListAllProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllProvidersResponse(rsp)
}

// GetProviderWithResponse request returning *GetProviderResponse
func (c *ClientWithResponses) GetProviderWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error) {
	rsp, err := c.GetProvider(ctx, team, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderResponse(rsp)
}

// CompleteRegistrationWithResponse request returning *CompleteRegistrationResponse
func (c *ClientWithResponses) CompleteRegistrationWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*CompleteRegistrationResponse, error) {
	rsp, err := c.CompleteRegistration(ctx, team, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteRegistrationResponse(rsp)
}

// RegisterProviderWithResponse request returning *RegisterProviderResponse
func (c *ClientWithResponses) RegisterProviderWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*RegisterProviderResponse, error) {
	rsp, err := c.RegisterProvider(ctx, team, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterProviderResponse(rsp)
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Healthy bool `json:"healthy"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Healthy bool `json:"healthy"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAllProvidersResponse parses an HTTP response from a ListAllProvidersWithResponse call
func ParseListAllProvidersResponse(rsp *http.Response) (*ListAllProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next      *string    `json:"next"`
			Providers []Provider `json:"providers"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProviderResponse parses an HTTP response from a GetProviderWithResponse call
func ParseGetProviderResponse(rsp *http.Response) (*GetProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteRegistrationResponse parses an HTTP response from a CompleteRegistrationWithResponse call
func ParseCompleteRegistrationResponse(rsp *http.Response) (*CompleteRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegisterProviderResponse parses an HTTP response from a RegisterProviderWithResponse call
func ParseRegisterProviderResponse(rsp *http.Response) (*RegisterProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ZipUploadUrl string `json:"zipUploadUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Healthcheck
	// (GET /api/v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List Providers
	// (GET /api/v1/providers)
	ListAllProviders(w http.ResponseWriter, r *http.Request)
	// Get Provider
	// (GET /api/v1/team/{team}/providers/{name}/{version})
	GetProvider(w http.ResponseWriter, r *http.Request, team string, name string, version string)
	// Complete Registration
	// (POST /api/v1/team/{team}/providers/{name}/{version}/complete-registration)
	CompleteRegistration(w http.ResponseWriter, r *http.Request, team string, name string, version string)
	// Register Provider
	// (POST /api/v1/team/{team}/providers/{name}/{version}/register)
	RegisterProvider(w http.ResponseWriter, r *http.Request, team string, name string, version string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAllProviders operation middleware
func (siw *ServerInterfaceWrapper) ListAllProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllProviders(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "team" -------------
	var team string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team", runtime.ParamLocationPath, chi.URLParam(r, "team"), &team)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, team, name, version)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CompleteRegistration operation middleware
func (siw *ServerInterfaceWrapper) CompleteRegistration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "team" -------------
	var team string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team", runtime.ParamLocationPath, chi.URLParam(r, "team"), &team)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CompleteRegistration(w, r, team, name, version)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterProvider operation middleware
func (siw *ServerInterfaceWrapper) RegisterProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "team" -------------
	var team string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team", runtime.ParamLocationPath, chi.URLParam(r, "team"), &team)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterProvider(w, r, team, name, version)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers", wrapper.ListAllProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/team/{team}/providers/{name}/{version}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/team/{team}/providers/{name}/{version}/complete-registration", wrapper.CompleteRegistration)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/team/{team}/providers/{name}/{version}/register", wrapper.RegisterProvider)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
