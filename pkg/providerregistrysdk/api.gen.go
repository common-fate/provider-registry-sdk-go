// Package providerregistrysdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package providerregistrysdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ConfigurationArgumentType.
const (
	SECRETSTRING ConfigurationArgumentType = "SECRETSTRING"
	STRING       ConfigurationArgumentType = "STRING"
)

// Defines values for ProviderSetupDiagnosticLogLevel.
const (
	ProviderSetupDiagnosticLogLevelERROR   ProviderSetupDiagnosticLogLevel = "ERROR"
	ProviderSetupDiagnosticLogLevelINFO    ProviderSetupDiagnosticLogLevel = "INFO"
	ProviderSetupDiagnosticLogLevelWARNING ProviderSetupDiagnosticLogLevel = "WARNING"
)

// Defines values for ProviderSetupValidationStatus.
const (
	ProviderSetupValidationStatusERROR      ProviderSetupValidationStatus = "ERROR"
	ProviderSetupValidationStatusINPROGRESS ProviderSetupValidationStatus = "IN_PROGRESS"
	ProviderSetupValidationStatusPENDING    ProviderSetupValidationStatus = "PENDING"
	ProviderSetupValidationStatusSUCCESS    ProviderSetupValidationStatus = "SUCCESS"
)

// Defines values for TargetArgumentRequestFormElement.
const (
	TargetArgumentRequestFormElementSELECT TargetArgumentRequestFormElement = "SELECT"
)

// Defines values for TargetArgumentRuleFormElement.
const (
	TargetArgumentRuleFormElementINPUT       TargetArgumentRuleFormElement = "INPUT"
	TargetArgumentRuleFormElementMULTISELECT TargetArgumentRuleFormElement = "MULTISELECT"
	TargetArgumentRuleFormElementSELECT      TargetArgumentRuleFormElement = "SELECT"
)

// AuditSchema defines model for AuditSchema.
type AuditSchema struct {
	ResourceLoaders AuditSchema_ResourceLoaders `json:"resourceLoaders"`
}

// AuditSchema_ResourceLoaders defines model for AuditSchema.ResourceLoaders.
type AuditSchema_ResourceLoaders struct {
	AdditionalProperties map[string]ResourceLoader `json:"-"`
}

// ConfigurationArgument defines model for ConfigurationArgument.
type ConfigurationArgument struct {
	Id       string                    `json:"id"`
	Name     string                    `json:"name"`
	Optional bool                      `json:"optional"`
	Secret   bool                      `json:"secret"`
	Type     ConfigurationArgumentType `json:"type"`
	Usage    string                    `json:"usage"`
}

// ConfigurationArgumentType defines model for ConfigurationArgument.Type.
type ConfigurationArgumentType string

// ConfigurationSchema defines model for ConfigurationSchema.
type ConfigurationSchema struct {
	AdditionalProperties map[string]ConfigurationArgument `json:"-"`
}

// A registered provider version
type Provider struct {
	LambdaAssetS3Arn string         `json:"lambdaAssetS3Arn"`
	Name             string         `json:"name"`
	Schema           ProviderSchema `json:"schema"`
	Team             string         `json:"team"`
	Version          string         `json:"version"`
}

// ProviderConfigField defines model for ProviderConfigField.
type ProviderConfigField struct {
	Description string `json:"description"`
	Id          string `json:"id"`

	// Whether the config value is optional.
	IsOptional bool `json:"isOptional"`

	// Whether or not the config field is a secret (like an API key or a password)
	IsSecret bool   `json:"isSecret"`
	Name     string `json:"name"`

	// the path to where the secret will be stored, in a secrets manager like AWS SSM Parameter Store.
	SecretPath *string `json:"secretPath,omitempty"`
}

// ProviderConfigValue defines model for ProviderConfigValue.
type ProviderConfigValue struct {
	// The ID of the config field.
	Id string `json:"id"`

	// The value entered by the user.
	Value string `json:"value"`
}

// ProviderSchema defines model for ProviderSchema.
type ProviderSchema struct {
	Audit           AuditSchema         `json:"audit"`
	Configuration   ConfigurationSchema `json:"configuration"`
	ProviderVersion string              `json:"providerVersion"`
	SchemaVersion   string              `json:"schemaVersion"`
	Target          TargetSchema        `json:"target"`
}

// A log entry related to a provider setup validation.
type ProviderSetupDiagnosticLog struct {
	// The log level.
	Level ProviderSetupDiagnosticLogLevel `json:"level"`

	// The log message.
	Msg string `json:"msg"`
}

// The log level.
type ProviderSetupDiagnosticLogLevel string

// ProviderSetupInstructions defines model for ProviderSetupInstructions.
type ProviderSetupInstructions struct {
	StepDetails []ProviderSetupStepDetails `json:"stepDetails"`
}

// ProviderSetupStepDetails defines model for ProviderSetupStepDetails.
type ProviderSetupStepDetails struct {
	ConfigFields []ProviderConfigField `json:"configFields"`
	Instructions string                `json:"instructions"`
	Title        string                `json:"title"`
}

// Indicates whether a setup step is complete or not.
type ProviderSetupStepOverview struct {
	// Whether the step has been completed.
	Complete bool `json:"complete"`
}

// A validation against the configuration values of the Access Provider.
type ProviderSetupValidation struct {
	// The particular config fields validated, if any.
	FieldsValidated []interface{} `json:"fieldsValidated"`

	// The ID of the validation, such as `list-sso-users`.
	Id   string                        `json:"id"`
	Logs *[]ProviderSetupDiagnosticLog `json:"logs,omitempty"`

	// The status of the validation.
	Status ProviderSetupValidationStatus `json:"status"`
}

// The status of the validation.
type ProviderSetupValidationStatus string

// ResourceLoader defines model for ResourceLoader.
type ResourceLoader struct {
	Title string `json:"title"`
}

// S3Asset defines model for S3Asset.
type S3Asset struct {
	Bucket string `json:"bucket"`
	Path   string `json:"path"`
	Region string `json:"region"`
}

// Setup defines model for Setup.
type Setup struct {
	Schema Setup_Schema `json:"schema"`
	Steps  []string     `json:"steps"`
}

// Setup_Schema defines model for Setup.Schema.
type Setup_Schema struct {
	AdditionalProperties map[string]ConfigurationArgument `json:"-"`
}

// Define the metadata, data type and UI elements for the argument
type TargetArgument struct {
	Description *string               `json:"description,omitempty"`
	Groups      TargetArgument_Groups `json:"groups"`
	Id          string                `json:"id"`

	// Optional form element for the request form, if not provided, defaults to multiselect
	RequestFormElement TargetArgumentRequestFormElement `json:"requestFormElement"`
	RuleFormElement    TargetArgumentRuleFormElement    `json:"ruleFormElement"`
	Title              string                           `json:"title"`
}

// TargetArgument_Groups defines model for TargetArgument.Groups.
type TargetArgument_Groups struct {
	AdditionalProperties map[string]TargetArgumentGroup `json:"-"`
}

// Optional form element for the request form, if not provided, defaults to multiselect
type TargetArgumentRequestFormElement string

// TargetArgumentRuleFormElement defines model for TargetArgument.RuleFormElement.
type TargetArgumentRuleFormElement string

// An argument group
type TargetArgumentGroup struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// TargetSchema defines model for TargetSchema.
type TargetSchema struct {
	AdditionalProperties map[string]TargetArgument `json:"-"`
}

// Usage defines model for Usage.
type Usage struct {
	Usage string `json:"usage"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Healthy bool `json:"healthy"`
}

// ListProvidersResponse defines model for ListProvidersResponse.
type ListProvidersResponse struct {
	Next      *string    `json:"next"`
	Providers []Provider `json:"providers"`
}

// RegisterProvidersResponse defines model for RegisterProvidersResponse.
type RegisterProvidersResponse struct {
	ZipUploadUrl string `json:"zipUploadUrl"`
}

// Getter for additional properties for AuditSchema_ResourceLoaders. Returns the specified
// element and whether it was found
func (a AuditSchema_ResourceLoaders) Get(fieldName string) (value ResourceLoader, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuditSchema_ResourceLoaders
func (a *AuditSchema_ResourceLoaders) Set(fieldName string, value ResourceLoader) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ResourceLoader)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuditSchema_ResourceLoaders to handle AdditionalProperties
func (a *AuditSchema_ResourceLoaders) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ResourceLoader)
		for fieldName, fieldBuf := range object {
			var fieldVal ResourceLoader
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuditSchema_ResourceLoaders to handle AdditionalProperties
func (a AuditSchema_ResourceLoaders) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConfigurationSchema. Returns the specified
// element and whether it was found
func (a ConfigurationSchema) Get(fieldName string) (value ConfigurationArgument, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConfigurationSchema
func (a *ConfigurationSchema) Set(fieldName string, value ConfigurationArgument) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ConfigurationArgument)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConfigurationSchema to handle AdditionalProperties
func (a *ConfigurationSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ConfigurationArgument)
		for fieldName, fieldBuf := range object {
			var fieldVal ConfigurationArgument
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConfigurationSchema to handle AdditionalProperties
func (a ConfigurationSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Setup_Schema. Returns the specified
// element and whether it was found
func (a Setup_Schema) Get(fieldName string) (value ConfigurationArgument, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Setup_Schema
func (a *Setup_Schema) Set(fieldName string, value ConfigurationArgument) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ConfigurationArgument)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Setup_Schema to handle AdditionalProperties
func (a *Setup_Schema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ConfigurationArgument)
		for fieldName, fieldBuf := range object {
			var fieldVal ConfigurationArgument
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Setup_Schema to handle AdditionalProperties
func (a Setup_Schema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TargetArgument_Groups. Returns the specified
// element and whether it was found
func (a TargetArgument_Groups) Get(fieldName string) (value TargetArgumentGroup, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TargetArgument_Groups
func (a *TargetArgument_Groups) Set(fieldName string, value TargetArgumentGroup) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]TargetArgumentGroup)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TargetArgument_Groups to handle AdditionalProperties
func (a *TargetArgument_Groups) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]TargetArgumentGroup)
		for fieldName, fieldBuf := range object {
			var fieldVal TargetArgumentGroup
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TargetArgument_Groups to handle AdditionalProperties
func (a TargetArgument_Groups) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TargetSchema. Returns the specified
// element and whether it was found
func (a TargetSchema) Get(fieldName string) (value TargetArgument, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TargetSchema
func (a *TargetSchema) Set(fieldName string, value TargetArgument) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]TargetArgument)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TargetSchema to handle AdditionalProperties
func (a *TargetSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]TargetArgument)
		for fieldName, fieldBuf := range object {
			var fieldVal TargetArgument
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TargetSchema to handle AdditionalProperties
func (a TargetSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllProviders request
	ListAllProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvider request
	GetProvider(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderSetupDocs request
	GetProviderSetupDocs(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderUsageDoc request
	GetProviderUsageDoc(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvider(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderRequest(c.Server, team, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderSetupDocs(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderSetupDocsRequest(c.Server, team, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderUsageDoc(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderUsageDocRequest(c.Server, team, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAllProvidersRequest generates requests for ListAllProviders
func NewListAllProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderRequest generates requests for GetProvider
func NewGetProviderRequest(server string, team string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/team/%s/providers/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderSetupDocsRequest generates requests for GetProviderSetupDocs
func NewGetProviderSetupDocsRequest(server string, team string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/team/%s/providers/%s/%s/setup", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderUsageDocRequest generates requests for GetProviderUsageDoc
func NewGetProviderUsageDocRequest(server string, team string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team", runtime.ParamLocationPath, team)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/team/%s/providers/%s/%s/usage", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHealth request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// ListAllProviders request
	ListAllProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error)

	// GetProvider request
	GetProviderWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error)

	// GetProviderSetupDocs request
	GetProviderSetupDocsWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderSetupDocsResponse, error)

	// GetProviderUsageDoc request
	GetProviderUsageDocWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderUsageDocResponse, error)
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Healthy bool `json:"healthy"`
	}
	JSON500 *struct {
		Healthy bool `json:"healthy"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next      *string    `json:"next"`
		Providers []Provider `json:"providers"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAllProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Provider
}

// Status returns HTTPResponse.Status
func (r GetProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderSetupDocsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetProviderSetupDocsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderSetupDocsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderUsageDocResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetProviderUsageDocResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderUsageDocResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ListAllProvidersWithResponse request returning *ListAllProvidersResponse
func (c *ClientWithResponses) ListAllProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error) {
	rsp, err := c.ListAllProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllProvidersResponse(rsp)
}

// GetProviderWithResponse request returning *GetProviderResponse
func (c *ClientWithResponses) GetProviderWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error) {
	rsp, err := c.GetProvider(ctx, team, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderResponse(rsp)
}

// GetProviderSetupDocsWithResponse request returning *GetProviderSetupDocsResponse
func (c *ClientWithResponses) GetProviderSetupDocsWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderSetupDocsResponse, error) {
	rsp, err := c.GetProviderSetupDocs(ctx, team, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderSetupDocsResponse(rsp)
}

// GetProviderUsageDocWithResponse request returning *GetProviderUsageDocResponse
func (c *ClientWithResponses) GetProviderUsageDocWithResponse(ctx context.Context, team string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderUsageDocResponse, error) {
	rsp, err := c.GetProviderUsageDoc(ctx, team, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderUsageDocResponse(rsp)
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Healthy bool `json:"healthy"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Healthy bool `json:"healthy"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAllProvidersResponse parses an HTTP response from a ListAllProvidersWithResponse call
func ParseListAllProvidersResponse(rsp *http.Response) (*ListAllProvidersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next      *string    `json:"next"`
			Providers []Provider `json:"providers"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProviderResponse parses an HTTP response from a GetProviderWithResponse call
func ParseGetProviderResponse(rsp *http.Response) (*GetProviderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderSetupDocsResponse parses an HTTP response from a GetProviderSetupDocsWithResponse call
func ParseGetProviderSetupDocsResponse(rsp *http.Response) (*GetProviderSetupDocsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderSetupDocsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderUsageDocResponse parses an HTTP response from a GetProviderUsageDocWithResponse call
func ParseGetProviderUsageDocResponse(rsp *http.Response) (*GetProviderUsageDocResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderUsageDocResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Healthcheck
	// (GET /api/v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List Providers
	// (GET /api/v1/providers)
	ListAllProviders(w http.ResponseWriter, r *http.Request)
	// Get Provider
	// (GET /api/v1/team/{team}/providers/{name}/{version})
	GetProvider(w http.ResponseWriter, r *http.Request, team string, name string, version string)
	// Get Provider Setup Docs
	// (GET /api/v1/team/{team}/providers/{name}/{version}/setup)
	GetProviderSetupDocs(w http.ResponseWriter, r *http.Request, team string, name string, version string)
	// Get Provider Usage Doc
	// (GET /api/v1/team/{team}/providers/{name}/{version}/usage)
	GetProviderUsageDoc(w http.ResponseWriter, r *http.Request, team string, name string, version string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListAllProviders operation middleware
func (siw *ServerInterfaceWrapper) ListAllProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllProviders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "team" -------------
	var team string

	err = runtime.BindStyledParameter("simple", false, "team", chi.URLParam(r, "team"), &team)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, team, name, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviderSetupDocs operation middleware
func (siw *ServerInterfaceWrapper) GetProviderSetupDocs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "team" -------------
	var team string

	err = runtime.BindStyledParameter("simple", false, "team", chi.URLParam(r, "team"), &team)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviderSetupDocs(w, r, team, name, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviderUsageDoc operation middleware
func (siw *ServerInterfaceWrapper) GetProviderUsageDoc(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "team" -------------
	var team string

	err = runtime.BindStyledParameter("simple", false, "team", chi.URLParam(r, "team"), &team)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviderUsageDoc(w, r, team, name, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers", wrapper.ListAllProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/team/{team}/providers/{name}/{version}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/team/{team}/providers/{name}/{version}/setup", wrapper.GetProviderSetupDocs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/team/{team}/providers/{name}/{version}/usage", wrapper.GetProviderUsageDoc)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
