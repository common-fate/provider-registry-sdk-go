// Package providerregistrysdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package providerregistrysdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ConfigType.
const (
	ConfigTypeString ConfigType = "string"
)

// Defines values for LogLevel.
const (
	ERROR   LogLevel = "ERROR"
	INFO    LogLevel = "INFO"
	WARNING LogLevel = "WARNING"
)

// Defines values for TargetType.
const (
	Object TargetType = "object"
)

// Defines values for TargetFieldType.
const (
	TargetFieldTypeString TargetFieldType = "string"
)

// Config defines model for Config.
type Config struct {
	// The usage for the config variable.
	Description *string    `json:"description,omitempty"`
	Secret      *bool      `json:"secret,omitempty"`
	Type        ConfigType `json:"type"`
}

// ConfigType defines model for Config.Type.
type ConfigType string

// DescribeResponse defines model for DescribeResponse.
type DescribeResponse struct {
	Config      map[string]interface{} `json:"config"`
	Diagnostics []DiagnosticLog        `json:"diagnostics"`
	Healthy     bool                   `json:"healthy"`

	// A registered provider version
	Provider Provider `json:"provider"`

	// The schema for a Common Fate Provider.
	Schema Schema `json:"schema"`
}

// DiagnosticLog defines model for DiagnosticLog.
type DiagnosticLog struct {
	Level LogLevel `json:"level"`
	Msg   string   `json:"msg"`
}

// A callable function in the provider which can
// load resources.
//
// Additional fields for loader configuration may be added
// in a future specification.
type Loader struct {
	Title string `json:"title"`
}

// LogLevel defines model for LogLevel.
type LogLevel string

// Meta defines model for Meta.
type Meta struct {
	// The Provider Developer Kit framework version which published the schema.
	Framework *string `json:"framework,omitempty"`
}

// A registered provider version
type Provider struct {
	Name      string `json:"name"`
	Publisher string `json:"publisher"`
	Version   string `json:"version"`
}

// A registered provider version
type ProviderDetail struct {
	CfnTemplateS3Arn string  `json:"cfnTemplateS3Arn"`
	Icon             *string `json:"icon,omitempty"`
	LambdaAssetS3Arn string  `json:"lambdaAssetS3Arn"`
	Name             string  `json:"name"`
	Publisher        string  `json:"publisher"`

	// The schema for a Common Fate Provider.
	Schema  Schema `json:"schema"`
	Version string `json:"version"`
}

// Providers defines model for Providers.
type Providers struct {
	Name      string `json:"name"`
	Publisher string `json:"publisher"`
	Version   string `json:"version"`
}

// Resources defines model for Resources.
type Resources struct {
	Loaders map[string]Loader `json:"loaders"`

	// the types of resources
	Types map[string]interface{} `json:"types"`
}

// The schema for a Common Fate Provider.
type Schema struct {
	Id     string             `json:"$id"`
	Schema string             `json:"$schema"`
	Config *map[string]Config `json:"config,omitempty"`
	Meta   Meta               `json:"meta"`

	// A registered provider version
	Provider  *Provider          `json:"provider,omitempty"`
	Resources *Resources         `json:"resources,omitempty"`
	Targets   *map[string]Target `json:"targets,omitempty"`
}

// Target defines model for Target.
type Target struct {
	// the actual properties of the target.
	Properties map[string]TargetField `json:"properties"`

	// included for compatibility with JSON Schema - all targets are currently objects.
	Type TargetType `json:"type"`
}

// included for compatibility with JSON Schema - all targets are currently objects.
type TargetType string

// TargetField defines model for TargetField.
type TargetField struct {
	Description *string `json:"description,omitempty"`

	// If specified, the type of the resource the field should be populated from.
	Resource *string         `json:"resource,omitempty"`
	Title    *string         `json:"title,omitempty"`
	Type     TargetFieldType `json:"type"`
}

// TargetFieldType defines model for TargetField.Type.
type TargetFieldType string

// User Details returned by Github Authenticator
type UserDetail struct {
	Company *string `json:"company,omitempty"`
	Email   *string `json:"email,omitempty"`
	Id      *string `json:"id,omitempty"`
	Login   *string `json:"login,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Healthy bool `json:"healthy"`
}

// ListProvidersResponse defines model for ListProvidersResponse.
type ListProvidersResponse struct {
	Next      *string          `json:"next"`
	Providers []ProviderDetail `json:"providers"`
}

// ListAllProvidersParams defines parameters for ListAllProviders.
type ListAllProvidersParams struct {
	// withDev flag will return all providers including dev providers
	WithDev *bool `form:"withDev,omitempty" json:"withDev,omitempty"`
}

// PostV1alpha1RegisterJSONBody defines parameters for PostV1alpha1Register.
type PostV1alpha1RegisterJSONBody struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Username *string              `json:"username,omitempty"`
}

// GetV1alpha1SignupOauth2CallbackParams defines parameters for GetV1alpha1SignupOauth2Callback.
type GetV1alpha1SignupOauth2CallbackParams struct {
	Code *string `form:"code,omitempty" json:"code,omitempty"`
}

// PostV1alpha1RegisterJSONRequestBody defines body for PostV1alpha1Register for application/json ContentType.
type PostV1alpha1RegisterJSONRequestBody PostV1alpha1RegisterJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Healthcheck request
	Healthcheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllProviders request
	ListAllProviders(ctx context.Context, params *ListAllProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvider request
	GetProvider(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderSetupDocs request
	GetProviderSetupDocs(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderUsageDoc request
	GetProviderUsageDoc(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1alpha1Register request with any body
	PostV1alpha1RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1alpha1Register(ctx context.Context, body PostV1alpha1RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1alpha1SignupOauth2Callback request
	GetV1alpha1SignupOauth2Callback(ctx context.Context, params *GetV1alpha1SignupOauth2CallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1alpha1SignupOauth2Github request
	GetV1alpha1SignupOauth2Github(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Healthcheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthcheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllProviders(ctx context.Context, params *ListAllProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvider(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderRequest(c.Server, publisher, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderSetupDocs(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderSetupDocsRequest(c.Server, publisher, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderUsageDoc(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderUsageDocRequest(c.Server, publisher, name, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1alpha1RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1alpha1RegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1alpha1Register(ctx context.Context, body PostV1alpha1RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1alpha1RegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1alpha1SignupOauth2Callback(ctx context.Context, params *GetV1alpha1SignupOauth2CallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1alpha1SignupOauth2CallbackRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1alpha1SignupOauth2Github(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1alpha1SignupOauth2GithubRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewHealthcheckRequest generates requests for Healthcheck
func NewHealthcheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAllProvidersRequest generates requests for ListAllProviders
func NewListAllProvidersRequest(server string, params *ListAllProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WithDev != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDev", runtime.ParamLocationQuery, *params.WithDev); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderRequest generates requests for GetProvider
func NewGetProviderRequest(server string, publisher string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publisher", runtime.ParamLocationPath, publisher)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/providers/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderSetupDocsRequest generates requests for GetProviderSetupDocs
func NewGetProviderSetupDocsRequest(server string, publisher string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publisher", runtime.ParamLocationPath, publisher)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/providers/%s/%s/%s/setup", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderUsageDocRequest generates requests for GetProviderUsageDoc
func NewGetProviderUsageDocRequest(server string, publisher string, name string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publisher", runtime.ParamLocationPath, publisher)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/providers/%s/%s/%s/usage", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1alpha1RegisterRequest calls the generic PostV1alpha1Register builder with application/json body
func NewPostV1alpha1RegisterRequest(server string, body PostV1alpha1RegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1alpha1RegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1alpha1RegisterRequestWithBody generates requests for PostV1alpha1Register with any type of body
func NewPostV1alpha1RegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1alpha1SignupOauth2CallbackRequest generates requests for GetV1alpha1SignupOauth2Callback
func NewGetV1alpha1SignupOauth2CallbackRequest(server string, params *GetV1alpha1SignupOauth2CallbackParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/signup/oauth2/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Code != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1alpha1SignupOauth2GithubRequest generates requests for GetV1alpha1SignupOauth2Github
func NewGetV1alpha1SignupOauth2GithubRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/signup/oauth2/github")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Healthcheck request
	HealthcheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthcheckResponse, error)

	// ListAllProviders request
	ListAllProvidersWithResponse(ctx context.Context, params *ListAllProvidersParams, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error)

	// GetProvider request
	GetProviderWithResponse(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error)

	// GetProviderSetupDocs request
	GetProviderSetupDocsWithResponse(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderSetupDocsResponse, error)

	// GetProviderUsageDoc request
	GetProviderUsageDocWithResponse(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderUsageDocResponse, error)

	// PostV1alpha1Register request with any body
	PostV1alpha1RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1alpha1RegisterResponse, error)

	PostV1alpha1RegisterWithResponse(ctx context.Context, body PostV1alpha1RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1alpha1RegisterResponse, error)

	// GetV1alpha1SignupOauth2Callback request
	GetV1alpha1SignupOauth2CallbackWithResponse(ctx context.Context, params *GetV1alpha1SignupOauth2CallbackParams, reqEditors ...RequestEditorFn) (*GetV1alpha1SignupOauth2CallbackResponse, error)

	// GetV1alpha1SignupOauth2Github request
	GetV1alpha1SignupOauth2GithubWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1alpha1SignupOauth2GithubResponse, error)
}

type HealthcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HealthcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next      *string          `json:"next"`
		Providers []ProviderDetail `json:"providers"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAllProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderDetail
	JSON404      *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderSetupDocsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetProviderSetupDocsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderSetupDocsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderUsageDocResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetProviderUsageDocResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderUsageDocResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1alpha1RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1alpha1RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1alpha1RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1alpha1SignupOauth2CallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1alpha1SignupOauth2CallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1alpha1SignupOauth2CallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1alpha1SignupOauth2GithubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// User Details returned by Github Authenticator
		User *UserDetail `json:"User,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1alpha1SignupOauth2GithubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1alpha1SignupOauth2GithubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HealthcheckWithResponse request returning *HealthcheckResponse
func (c *ClientWithResponses) HealthcheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthcheckResponse, error) {
	rsp, err := c.Healthcheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthcheckResponse(rsp)
}

// ListAllProvidersWithResponse request returning *ListAllProvidersResponse
func (c *ClientWithResponses) ListAllProvidersWithResponse(ctx context.Context, params *ListAllProvidersParams, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error) {
	rsp, err := c.ListAllProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllProvidersResponse(rsp)
}

// GetProviderWithResponse request returning *GetProviderResponse
func (c *ClientWithResponses) GetProviderWithResponse(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error) {
	rsp, err := c.GetProvider(ctx, publisher, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderResponse(rsp)
}

// GetProviderSetupDocsWithResponse request returning *GetProviderSetupDocsResponse
func (c *ClientWithResponses) GetProviderSetupDocsWithResponse(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderSetupDocsResponse, error) {
	rsp, err := c.GetProviderSetupDocs(ctx, publisher, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderSetupDocsResponse(rsp)
}

// GetProviderUsageDocWithResponse request returning *GetProviderUsageDocResponse
func (c *ClientWithResponses) GetProviderUsageDocWithResponse(ctx context.Context, publisher string, name string, version string, reqEditors ...RequestEditorFn) (*GetProviderUsageDocResponse, error) {
	rsp, err := c.GetProviderUsageDoc(ctx, publisher, name, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderUsageDocResponse(rsp)
}

// PostV1alpha1RegisterWithBodyWithResponse request with arbitrary body returning *PostV1alpha1RegisterResponse
func (c *ClientWithResponses) PostV1alpha1RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1alpha1RegisterResponse, error) {
	rsp, err := c.PostV1alpha1RegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1alpha1RegisterResponse(rsp)
}

func (c *ClientWithResponses) PostV1alpha1RegisterWithResponse(ctx context.Context, body PostV1alpha1RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1alpha1RegisterResponse, error) {
	rsp, err := c.PostV1alpha1Register(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1alpha1RegisterResponse(rsp)
}

// GetV1alpha1SignupOauth2CallbackWithResponse request returning *GetV1alpha1SignupOauth2CallbackResponse
func (c *ClientWithResponses) GetV1alpha1SignupOauth2CallbackWithResponse(ctx context.Context, params *GetV1alpha1SignupOauth2CallbackParams, reqEditors ...RequestEditorFn) (*GetV1alpha1SignupOauth2CallbackResponse, error) {
	rsp, err := c.GetV1alpha1SignupOauth2Callback(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1alpha1SignupOauth2CallbackResponse(rsp)
}

// GetV1alpha1SignupOauth2GithubWithResponse request returning *GetV1alpha1SignupOauth2GithubResponse
func (c *ClientWithResponses) GetV1alpha1SignupOauth2GithubWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1alpha1SignupOauth2GithubResponse, error) {
	rsp, err := c.GetV1alpha1SignupOauth2Github(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1alpha1SignupOauth2GithubResponse(rsp)
}

// ParseHealthcheckResponse parses an HTTP response from a HealthcheckWithResponse call
func ParseHealthcheckResponse(rsp *http.Response) (*HealthcheckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAllProvidersResponse parses an HTTP response from a ListAllProvidersWithResponse call
func ParseListAllProvidersResponse(rsp *http.Response) (*ListAllProvidersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next      *string          `json:"next"`
			Providers []ProviderDetail `json:"providers"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProviderResponse parses an HTTP response from a GetProviderWithResponse call
func ParseGetProviderResponse(rsp *http.Response) (*GetProviderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProviderSetupDocsResponse parses an HTTP response from a GetProviderSetupDocsWithResponse call
func ParseGetProviderSetupDocsResponse(rsp *http.Response) (*GetProviderSetupDocsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderSetupDocsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderUsageDocResponse parses an HTTP response from a GetProviderUsageDocWithResponse call
func ParseGetProviderUsageDocResponse(rsp *http.Response) (*GetProviderUsageDocResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderUsageDocResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1alpha1RegisterResponse parses an HTTP response from a PostV1alpha1RegisterWithResponse call
func ParsePostV1alpha1RegisterResponse(rsp *http.Response) (*PostV1alpha1RegisterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1alpha1RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1alpha1SignupOauth2CallbackResponse parses an HTTP response from a GetV1alpha1SignupOauth2CallbackWithResponse call
func ParseGetV1alpha1SignupOauth2CallbackResponse(rsp *http.Response) (*GetV1alpha1SignupOauth2CallbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1alpha1SignupOauth2CallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1alpha1SignupOauth2GithubResponse parses an HTTP response from a GetV1alpha1SignupOauth2GithubWithResponse call
func ParseGetV1alpha1SignupOauth2GithubResponse(rsp *http.Response) (*GetV1alpha1SignupOauth2GithubResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1alpha1SignupOauth2GithubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// User Details returned by Github Authenticator
			User *UserDetail `json:"User,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Healthcheck
	// (GET /v1alpha1/health)
	Healthcheck(w http.ResponseWriter, r *http.Request)
	// List Providers
	// (GET /v1alpha1/providers)
	ListAllProviders(w http.ResponseWriter, r *http.Request, params ListAllProvidersParams)
	// Get Provider
	// (GET /v1alpha1/providers/{publisher}/{name}/{version})
	GetProvider(w http.ResponseWriter, r *http.Request, publisher string, name string, version string)
	// Get Provider Setup Docs
	// (GET /v1alpha1/providers/{publisher}/{name}/{version}/setup)
	GetProviderSetupDocs(w http.ResponseWriter, r *http.Request, publisher string, name string, version string)
	// Get Provider Usage Doc
	// (GET /v1alpha1/providers/{publisher}/{name}/{version}/usage)
	GetProviderUsageDoc(w http.ResponseWriter, r *http.Request, publisher string, name string, version string)

	// (POST /v1alpha1/register)
	PostV1alpha1Register(w http.ResponseWriter, r *http.Request)

	// (GET /v1alpha1/signup/oauth2/callback)
	GetV1alpha1SignupOauth2Callback(w http.ResponseWriter, r *http.Request, params GetV1alpha1SignupOauth2CallbackParams)

	// (GET /v1alpha1/signup/oauth2/github)
	GetV1alpha1SignupOauth2Github(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) Healthcheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Healthcheck(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListAllProviders operation middleware
func (siw *ServerInterfaceWrapper) ListAllProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllProvidersParams

	// ------------- Optional query parameter "withDev" -------------
	if paramValue := r.URL.Query().Get("withDev"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "withDev", r.URL.Query(), &params.WithDev)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "withDev", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllProviders(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "publisher" -------------
	var publisher string

	err = runtime.BindStyledParameter("simple", false, "publisher", chi.URLParam(r, "publisher"), &publisher)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "publisher", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, publisher, name, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviderSetupDocs operation middleware
func (siw *ServerInterfaceWrapper) GetProviderSetupDocs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "publisher" -------------
	var publisher string

	err = runtime.BindStyledParameter("simple", false, "publisher", chi.URLParam(r, "publisher"), &publisher)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "publisher", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviderSetupDocs(w, r, publisher, name, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviderUsageDoc operation middleware
func (siw *ServerInterfaceWrapper) GetProviderUsageDoc(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "publisher" -------------
	var publisher string

	err = runtime.BindStyledParameter("simple", false, "publisher", chi.URLParam(r, "publisher"), &publisher)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "publisher", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviderUsageDoc(w, r, publisher, name, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostV1alpha1Register operation middleware
func (siw *ServerInterfaceWrapper) PostV1alpha1Register(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1alpha1Register(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV1alpha1SignupOauth2Callback operation middleware
func (siw *ServerInterfaceWrapper) GetV1alpha1SignupOauth2Callback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1alpha1SignupOauth2CallbackParams

	// ------------- Optional query parameter "code" -------------
	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1alpha1SignupOauth2Callback(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV1alpha1SignupOauth2Github operation middleware
func (siw *ServerInterfaceWrapper) GetV1alpha1SignupOauth2Github(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1alpha1SignupOauth2Github(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1alpha1/health", wrapper.Healthcheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1alpha1/providers", wrapper.ListAllProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1alpha1/providers/{publisher}/{name}/{version}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1alpha1/providers/{publisher}/{name}/{version}/setup", wrapper.GetProviderSetupDocs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1alpha1/providers/{publisher}/{name}/{version}/usage", wrapper.GetProviderUsageDoc)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1alpha1/register", wrapper.PostV1alpha1Register)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1alpha1/signup/oauth2/callback", wrapper.GetV1alpha1SignupOauth2Callback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1alpha1/signup/oauth2/github", wrapper.GetV1alpha1SignupOauth2Github)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
