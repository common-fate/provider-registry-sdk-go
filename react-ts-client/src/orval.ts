/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * Example API
 * Example API
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
export type RegisterProvidersResponseResponse = {
  zipUploadUrl: string;
};

export type ListProvidersResponseResponse = {
  providers: Provider[];
  next: string | null;
};

export type ErrorResponseResponse = {
  error?: string;
};

export type HealthResponseResponse = {
  healthy: boolean;
};

/**
 * An argument group
 */
export interface ArgumentGroup {
  id: string;
  title: string;
  description?: string;
}

export type ArgumentGroups = {[key: string]: ArgumentGroup};

/**
 * Optional form element for the request form, if not provided, defaults to multiselect
 */
export type ArgumentRequestFormElement = typeof ArgumentRequestFormElement[keyof typeof ArgumentRequestFormElement];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArgumentRequestFormElement = {
  SELECT: 'SELECT',
} as const;

export type ArgumentRuleFormElement = typeof ArgumentRuleFormElement[keyof typeof ArgumentRuleFormElement];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArgumentRuleFormElement = {
  INPUT: 'INPUT',
  MULTISELECT: 'MULTISELECT',
  SELECT: 'SELECT',
} as const;

/**
 * Define the metadata, data type and UI elements for the argument
 */
export interface Argument {
  id: string;
  title: string;
  description?: string;
  ruleFormElement: ArgumentRuleFormElement;
  /** Optional form element for the request form, if not provided, defaults to multiselect */
  requestFormElement?: ArgumentRequestFormElement;
  groups?: ArgumentGroups;
}

/**
 * Provider argument schema defines the arguments, titles, descriptions and UI elements for provider arguments.
 */
export interface ArgumentSchema {[key: string]: Argument}

export type ConfigSchemaType = typeof ConfigSchemaType[keyof typeof ConfigSchemaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConfigSchemaType = {
  STRING: 'STRING',
  SECRETSTRING: 'SECRETSTRING',
} as const;

export interface ConfigSchema {
  id: string;
  type: ConfigSchemaType;
  secret: boolean;
  optional: boolean;
  usage: string;
  name: string;
}

export interface S3Asset {
  path: string;
  bucket: string;
  region: string;
}

export interface Usage {
  usage: string;
}

export type SetupSchema = {[key: string]: ConfigSchema};

export interface Setup {
  steps: string[];
  schema: SetupSchema;
}

/**
 * A registered provider version
 */
export interface Provider {
  team: string;
  name: string;
  version: string;
  usage: string;
  setup: Setup;
  lambdaAssetS3Arn: string;
  argumentSchema: ArgumentSchema;
}




  type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


  /**
 * Returns the health of the service. If any healthchecks fail the response code will be 500 (Internal Server Error).
 * @summary Healthcheck
 */
export const getHealth = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HealthResponseResponse>> => {
    return axios.get(
      `/api/v1/health`,options
    );
  }


export const getGetHealthKey = () => [`/api/v1/health`];

    
export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthQueryError = AxiosError<unknown>

export const useGetHealth = <TError = AxiosError<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getHealth>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetHealthKey() : null);
  const swrFn = () => getHealth(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * @summary Register Provider
 */
export const registerProvider = (
    team: string,
    name: string,
    version: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RegisterProvidersResponseResponse>> => {
    return axios.post(
      `/api/v1/team/${team}/providers/${name}/${version}/register`,undefined,options
    );
  }



/**
 * @summary Complete Registration
 */
export const completeRegistration = (
    team: string,
    name: string,
    version: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/api/v1/team/${team}/providers/${name}/${version}/complete-registration`,undefined,options
    );
  }



/**
 * @summary Get Provider
 */
export const getProvider = (
    team: string,
    name: string,
    version: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Provider>> => {
    return axios.get(
      `/api/v1/team/${team}/providers/${name}/${version}`,options
    );
  }


export const getGetProviderKey = (team: string,
    name: string,
    version: string,) => [`/api/v1/team/${team}/providers/${name}/${version}`];

    
export type GetProviderQueryResult = NonNullable<Awaited<ReturnType<typeof getProvider>>>
export type GetProviderQueryError = AxiosError<unknown>

export const useGetProvider = <TError = AxiosError<unknown>>(
 team: string,
    name: string,
    version: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getProvider>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(team && name && version)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetProviderKey(team,name,version) : null);
  const swrFn = () => getProvider(team,name,version, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * @summary List Providers
 */
export const listAllProviders = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListProvidersResponseResponse>> => {
    return axios.get(
      `/api/v1/providers`,options
    );
  }


export const getListAllProvidersKey = () => [`/api/v1/providers`];

    
export type ListAllProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof listAllProviders>>>
export type ListAllProvidersQueryError = AxiosError<ErrorResponseResponse>

export const useListAllProviders = <TError = AxiosError<ErrorResponseResponse>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listAllProviders>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListAllProvidersKey() : null);
  const swrFn = () => listAllProviders(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


